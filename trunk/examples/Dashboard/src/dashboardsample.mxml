<?xml version="1.0" encoding="utf-8"?>
<!--
 Test for Dashboard including IFrames. 
 Uses an enhanced Dashboard example from WASI (http://webappsolution.com) found here:
 http://www.adobe.com/devnet/flex/samples/dashboard/dashboard.html 
-->
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:managers="com.esria.dashboard.managers.*"
	horizontalAlign="left"
	minWidth="600" minHeight="600"
	width="100%" height="100%"
	backgroundSize="100%"
	backgroundColor="#ffffff"
	applicationComplete="onApplicationComplete()">
	
<mx:Style source="../assets/dashboard.css" />

<managers:PodLayoutManager id="layoutmanager" 
	container="{maincanvas}" 
	update="StateManager.setPodLayout(event)" />
	
<mx:Canvas id="maincanvas" width="100%" height="100%" borderStyle="solid" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off"/>
	<mx:HBox>
		
<mx:Button id="maximize" label="maximize" toggle="true" selected="true">
	<mx:click>
		<![CDATA[
			for each (var pod:Pod in podHash) {
				pod.allowMaximize = maximize.selected;
			} 
		]]>
	</mx:click>
</mx:Button>
<mx:Button id="minimize" label="minimize" toggle="true" selected="true">
	<mx:click>
		<![CDATA[
			for each (var pod:Pod in podHash) {
				pod.allowMinimize = minimize.selected;
			} 
		]]>
	</mx:click>
</mx:Button>
<mx:Button id="close" label="close" toggle="true" selected="true">
	<mx:click>
		<![CDATA[
			for each (var pod:Pod in podHash) {
				pod.allowClose = close.selected;
			} 
		]]>
	</mx:click>
</mx:Button>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import com.google.code.flexiframe.IFrame;
			import com.esria.dashboard.events.LayoutChangeEvent;
			import com.esria.dashboard.managers.PodLayoutManager;
			import com.esria.dashboard.managers.StateManager;
			import com.esria.dashboard.view.Pod;
			import com.esria.dashboard.view.PodContentBase;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
						
			private function onApplicationComplete():void
			{
				for (var i:int =0; i<4; ++i) {
					var pod:Pod = new Pod();
					pod.id = "pod" + i;
					pod.title = "pod" + i;
					pod.allowMinimize = true;
					pod.allowMaximize = true;
					pod.allowClose	  = true;
					podHash[pod.id] = pod;
					layoutmanager.addItemAt(pod, i, false);
				}
				
				var content:IFrame = new IFrame();
				content.percentHeight = 100;
				content.percentWidth = 100;					
				content.source = "http://www.google.com";
				podHash["pod0"].addChild(content);

                content = new IFrame;
                content.percentHeight = 100;
                content.percentWidth = 100;                 
                content.source = "http://www.yahoo.com";
                podHash["pod1"].addChild(content);

                content = new IFrame;
                content.percentHeight = 100;
                content.percentWidth = 100;                 
                content.source = "http://code.google.com/p/flex-iframe";
                podHash["pod2"].addChild(content);

                content = new IFrame;
                content.percentHeight = 100;
                content.percentWidth = 100;                 
                content.source = "http://code.google.com/p/flex-iframe/updates/list";
                podHash["pod3"].addChild(content);
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
				pod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
			}
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				layoutmanager.removeNullItems();
				layoutmanager.updateLayout(false);
			}
		]]>
	</mx:Script>
</mx:Application>
